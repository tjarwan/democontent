<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.w3.org/MarkUp/SCHEMA/xhtml11.xsd" xml:lang="en">
<head>
 <title>Test document here</title>

<link rel="stylesheet" href="../css/base.min.css"/>
<link rel="stylesheet" href="../css/fancy.min.css"/>
<link rel="stylesheet" href="../css/pdf.css"/>
<meta name="viewport" content="width=640, height=824"/>
</head>
<body>
<div id="page_body">
<div id="pf6b" class="pf w0 h0" data-page-no="6b"><div class="pc pc6b w0 h0"><div class="t m0 x76 h5 y5a ff1e fs2 fc0 sc0 ls0 ws0"> <span class="_ _4"></span> </div><div class="t m0 x0 h5 y668 ff1e fs2 fc0 sc0 ls0 ws0"> </div><div class="t m0 x83 h5 y669 ff1e fs2 fc0 sc0 ls0 ws0"> </div><div class="t m0 x0 h3 y66a ff1d fs2 fc0 sc0 ls0 ws0"> <span class="_ _4"></span> </div><div class="t m0 x0 h5 y66b ff1e fs2 fc0 sc0 ls0 ws0"> </div><div class="t m0 x3c h5 y66c ff1e fs2 fc0 sc0 ls0 ws0"> </div><div class="t m0 xa1 h5 y66d ff1e fs2 fc0 sc0 ls0 ws0"> <span class="_ _4b"> </span> </div><div class="t m0 x95 h5 y66e ff1e fs2 fc0 sc0 ls0 ws0"> </div><div class="t m0 x0 h3 y66f ff1d fs2 fc0 sc0 ls0 ws0"> <span class="_ _4"></span> </div><div class="t m0 x0 h5 y670 ff1e fs2 fc0 sc0 ls0 ws0"> </div><div class="t m0 x1f h5 y671 ff1e fs2 fc0 sc0 ls0 ws0"> </div><div class="t m0 x3d h5 y672 ff1e fs2 fc0 sc0 ls0 ws0"> </div><div class="t m0 x76 h5 y673 ff1e fs2 fc0 sc0 ls0 ws0"> </div><div class="t m0 x0 h2 ya5 ff1d fs1 fc1 sc0 ls0 ws0">Models <span class="_ _4f"> </span>115 </div><div class="t m0 x76 h5 y5a ff1e fs2 fc1 sc0 ls7 ws1b">Such operations can also be represented nondiagrammatically in pro-</div><div class="t m0 x0 h5 y5b ff1e fs2 fc1 sc0 ls7 ws0">gram code. For example, the prior operations can be represented thus: </div><div class="t m0 x0 h19 y674 ff21 fs2 fc1 sc0 ls7 ws0">IF (v&gt;0) </div><div class="t m0 x76 h19 y675 ff21 fs2 fc1 sc0 ls7 ws0">PRINT(v,screen) </div><div class="t m0 x0 h19 y676 ff21 fs2 fc1 sc0 ls7 ws0">ELSE </div><div class="t m0 x76 h19 y677 ff21 fs2 fc1 sc0 ls7 ws0">v:= v F6-2016.pdf KindleGen UpdateModTime.jar deploy.sh downloaded files epub3-samples-master epub3-samples-master.zip epub3_fixed_publication.sh epub3_template input output pdf pdf_converter.sh sample epubs.zip test test1 update-mod-time.sh zip-epub-check.sh –1 </div><div class="t m0 x76 h19 y678 ff21 fs2 fc1 sc0 ls7 ws0">PRINT (v,screen) </div><div class="t m0 x0 h19 y679 ff21 fs2 fc1 sc0 ls7 ws0">END IF </div><div class="t m0 x0 h3 y67a ff1d fs2 fc1 sc0 ls11 ws3d">Format and Implementation </div><div class="t m0 x0 h5 y67b ff1e fs2 fc1 sc0 ls7 ws7b2">The same operations can be represented in a variety of general-purpose </div><div class="t m0 x0 h5 y67c ff1e fs2 fc1 sc0 ls11 ws32a">programming languages or in the machine language of a given computer<span class="_ _2d"></span>. </div><div class="t m0 x0 h5 y67d ff1e fs2 fc1 sc0 ls7 ws21b">And the program can be <span class="ff1f ws0">implemented</span><span class="ls11 ws66b"> in an open-ended number of ways, as </span></div><div class="t m0 x0 h5 y67e ff1e fs2 fc1 sc0 ls7 ws109">many ways as there are possible variations of hardware and software that </div><div class="t m0 x0 h5 y67f ff1e fs2 fc1 sc0 ls7 ws746">will support the operations. The notion of a “program” is thus idealized </div><div class="t m0 x0 h5 y680 ff1e fs2 fc1 sc0 ls7 ws7b3">away from its possible implementations. When a program is well designed </div><div class="t m0 x0 h5 y681 ff1e fs2 fc1 sc0 ls7 ws1d2">and used wisely<span class="_ _2d"></span>, these idealizations will not matter<span class="_ _2"></span>. However<span class="_ _2"></span>, implementa-</div><div class="t m0 x0 h5 y682 ff1e fs2 fc1 sc0 ls7 ws7b4">tion will sometimes matter<span class="_ _2d"></span>. For example, in a programming language, the </div><div class="t m0 x0 h5 y683 ff1e fs2 fc1 sc0 ls7 ws25e">domain of values to which an operation like addition (or however we wish </div><div class="t m0 x0 h5 y684 ff1e fs2 fc1 sc0 ls7 ws4ab">to think of its computer analogue) can be applied is open-ended. But in any </div><div class="t m0 x0 h5 y685 ff1e fs2 fc1 sc0 ls7 ws620">actual implementation, there is a limit on the ordinality that can be repre-</div><div class="t m0 x0 h5 y686 ff1e fs2 fc1 sc0 ls7 ws8a">sented (e.g., 2</div><div class="t m0 x44 h8 y687 ff1e fs4 fc1 sc0 ls42 ws0">32</div><div class="t m0 xa1 h5 y688 ff1e fs2 fc1 sc0 ls7 ws8a"> or 2</div><div class="t m0 xb6 h8 y687 ff1e fs4 fc1 sc0 ls42 ws0">64</div><div class="t m0 x4a h5 y688 ff1e fs2 fc1 sc0 ls7 ws251">), and different hardware and operating systems may </div><div class="t m0 x0 h5 y689 ff1e fs2 fc1 sc0 ls7 ws0">behave differently if this ordinality is exceeded. </div><div class="t m0 x0 h3 y68a ff1d fs2 fc1 sc0 ls12 ws0">Generativity </div><div class="t m0 x0 h5 y68b ff1e fs2 fc1 sc0 ls7 wse">Flowchart or coding-language representation of software dynamics is also </div><div class="t m0 x0 h5 y68c ff1e fs2 fc1 sc0 ls7 ws198">idealized in a second way: the program itself is a set of potentialities for </div><div class="t m0 x0 h5 y68d ff1e fs2 fc1 sc0 ls7 ws761">real events. For example, every time you use your word processor<span class="_ _2"></span>, what the </div><div class="t m0 x0 h5 y68e ff1e fs2 fc1 sc0 ls7 ws282">word-processing program <span class="ff1f">actually does</span><span class="ls11 ws338"> is different from what it did before, </span></div><div class="t m0 x0 h5 y68f ff1e fs2 fc1 sc0 ls7 ws7b5">because you are typing different symbols, performing different editing </div><div class="t m0 x0 h5 y690 ff1e fs2 fc1 sc0 ls7 ws0">operations, and so on. But the <span class="ff1f">program itself</span><span class="ls11 ws3d"> is unchanged. </span></div><div class="t m0 x76 h5 y691 ff1e fs2 fc1 sc0 ls7 ws7b6">Both flowcharts and program code can involve multiple levels of abstrac-</div><div class="t m0 x0 h5 y692 ff1e fs2 fc1 sc0 ls7 ws35d">tion. For example, a high-level flowchart for a program might represent </div><div class="t m0 x0 h5 y693 ff1e fs2 fc1 sc0 ls7 ws739">complicated algorithms with a single box. But one can also diagram the </div><div class="t m0 x0 h5 y694 ff1e fs2 fc1 sc0 ls7 ws91">flow of operations within that box. Similarly<span class="_ _2d"></span>, code is often “modularized.” </div><div class="t m0 x0 h5 y695 ff1e fs2 fc1 sc0 ls11 ws5dc">A repeatedly used algorithm is written once in source code and given a </div><div class="t m0 x0 h5 y696 ff1e fs2 fc1 sc0 ls7 ws7b7">name. The name is then used in further code to “call” that algorithm with-</div><div class="t m0 x0 h5 y697 ff1e fs2 fc1 sc0 ls7 ws555">out reproducing the lines of code. (Even the lowest-level operations of the </div><div class="t m0 x0 h5 y698 ff1e fs2 fc1 sc0 ls7 ws245">programming language are generally translated into a series of instructions </div></div><div class="pi" data-data='{"ctm":[1.271605,0.000000,0.000000,1.271605,0.000000,0.000000]}'></div></div>
</div>
</body>
</html>
