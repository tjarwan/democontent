<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><link rel="stylesheet" href="../css/base.min.css"/><link rel="stylesheet" href="../css/fancy.min.css"/><link rel="stylesheet" href="../css/pdf.css"/><meta name="viewport" content="width=640, height=824"/></head><body><div id="page_body"><div id="pfaa" class="pf w2 h2" data-page-no="aa"><div class="pc pcaa w2 h2"><div class="t m0 x5d h10 y83 ff2 fs2 fc0 sc0 ls8 ws0">Chapter 5: Reconnaissance: Nontechnical Data<span class="_ _9"> </span><span class="ff1 fs9 lsa">147</span></div><div class="t m0 x4 hd y11c ff4 fs7 fc0 sc0 ls0 ws0">W<span class="_ _3"/>orking with HTML tables can be a bit of a pain, but we hav<span class="_ _0"/>e a fe<span class="_ _0"/>w options </div><div class="t m0 x3 hd y11d ff4 fs7 fc0 sc0 ls0 ws0">to deal with them, depending on the layout of the data. The rst option is to </div><div class="t m0 x3 hd y11e ff4 fs7 fc0 sc0 ls0 ws0">use an existing Perl module HTML::T<span class="_ _3"/>ableExtract, which works quite well. The </div><div class="t m0 x3 hd y15c ff4 fs7 fc0 sc0 ls0 ws0">T<span class="_ _3"/>ableExtract module is perfect if the tables are consistent and complete and there are </div><div class="t m0 x3 hd y15d ff4 fs7 fc0 sc0 ls0 ws0">no issues with the HTML; otherwise, you might hav<span class="_ _0"/>e to just manipulate the pre<span class="_ _0"/>vious </div><div class="t m0 x3 hd y271 ff4 fs7 fc0 sc0 ls0 ws0">methods we used. </div><div class="t m0 x4 hd y272 ff4 fs7 fc0 sc0 ls0 ws0">In the follo<span class="_ _0"/>wing code, you can see an example using the <span class="_ _0"/>T<span class="_ _2"/>ableExtract module. </div><div class="t m0 x3 hd y160 ff4 fs7 fc0 sc0 ls0 ws0">The real magic happens after our call to the parse_le function. <span class="_ _2"/>After that, we simply </div><div class="t m0 x3 hd y161 ff4 fs7 fc0 sc0 ls0 ws0">print e<span class="_ _0"/>very ro<span class="_ _0"/>w with the v<span class="_ _0"/>alues separated by a comma and then print two hashes and </div><div class="t m0 x3 hd y273 ff4 fs7 fc0 sc0 ls0 ws0">a ne<span class="_ _0"/>wline character<span class="_ _0"/>. <span class="_ _0"/>This is performed for each table in the le and then—v<span class="_ _0"/>oila, a </div><div class="t m0 x3 hd y274 ff4 fs7 fc0 sc0 ls0 ws0">perfect CSV le.</div><div class="t m0 x3 h44 yfe7 fff fse fc0 sc0 ls0 ws0">#!/usr/bin/perl</div><div class="t m0 x3 h44 yfe8 fff fse fc0 sc0 ls0 ws0">use HTML::TableExtract;</div><div class="t m0 x3 h44 yfe9 fff fse fc0 sc0 ls0 ws0">my $te = HTML::TableExtract-&gt;new( );</div><div class="t m0 x3 h44 yfea fff fse fc0 sc0 ls0 ws0">$te-&gt;parse_file('in.html');</div><div class="t m0 x3 h44 yfeb fff fse fc0 sc0 ls0 ws0">foreach $table ( $te-&gt;tables ) { </div><div class="t m0 x3 h44 yfec fff fse fc0 sc0 ls0 ws0">    foreach $row ($table-&gt;rows) {</div><div class="t m0 x3 h44 yfed fff fse fc0 sc0 ls0 ws0">        print join(',', @$row), "##\n";</div><div class="t m0 x3 h44 yfee fff fse fc0 sc0 ls0 ws0">    }</div><div class="t m0 x3 h44 yfef fff fse fc0 sc0 ls0 ws0">}</div><div class="t m0 x4 hd yff0 ff4 fs7 fc0 sc0 ls0 ws0">There are many good options for searching HTML tables using <span class="_ _0"/>T<span class="_ _3"/>ableExtract. </div><div class="t m0 x3 hd yff1 ff4 fs7 fc0 sc0 ls0 ws0">For e<span class="_ _0"/>xample, if there are multiple tables within the HTML le, you can specify </div><div class="t m0 x3 hd yff2 ff4 fs7 fc0 sc0 ls0 ws0">indi<span class="_ _0"/>vidual tables by their unique number or the name of table elds. <span class="_ _3"/>Y<span class="_ _3"/>ou can also </div><div class="t m0 x3 hd yff3 ff4 fs7 fc0 sc0 ls0 ws0">specify tables by the headers. For more information, check out the documentation for </div><div class="t m0 x3 hd yff4 ff4 fs7 fc0 sc0 ls0 ws0">the T<span class="_ _3"/>ableExtract Perl module.</div><div class="t m0 x3 h40 yff5 fff fs5 fc0 sc0 ls0 ws0">user@kali:~$ ./table-loop.pl </div><div class="t m0 x3 h40 yff6 fff fs5 fc0 sc0 ls0 ws0">Smith, John,email,555-1212,Student Solution Center,WeakTarget NYC Office,3rd </div><div class="t m0 x3 h40 yff7 fff fs5 fc0 sc0 ls0 ws0">floor##</div><div class="t m0 x3 h40 yff8 fff fs5 fc0 sc0 ls0 ws0">Smith, Jason,email,555-3434,Marketing Department,WeakTarget Headquarters,4th </div><div class="t m0 x3 h40 yff9 fff fs5 fc0 sc0 ls0 ws0">floor##</div><div class="t m0 x3 h40 yffa fff fs5 fc0 sc0 ls0 ws0">user@kali:~$</div><div class="t m0 x4 hd yffb ff4 fs7 fc0 sc0 ls0 ws20">Since all of the data is no<span class="_ _0"/>w on one line, we need a good way of determining where </div><div class="t m0 x3 hd yffc ff4 fs7 fc0 sc0 ls0 ws0">each record ends. If you look at the script and the output, you’ll see that we actually </div><div class="t m0 x3 hd yffd ff4 fs7 fc0 sc0 ls0 ws0">end each record in the table with two hash characters (##). <span class="_ _0"/>This is a simple way of </div><div class="t m0 x3 hd yffe ff4 fs7 fc0 sc0 ls0 ws0">marking the end of each record. So if we nish with :%s/##/\n/g we no<span class="_ _0"/>w hav<span class="_ _0"/>e a </div><div class="t m0 x3 hd yfff ff4 fs7 fc0 sc0 ls0 ws0">perfect CSV le ready to roll. <span class="_ _2"/>Alternatively<span class="_ _3"/>, you can set up a unique identier for the </div><div class="t m0 x3 hd y1000 ff4 fs7 fc0 sc0 ls0 ws0">beginning of the records as well.</div></div><div class="pi" data-data="{&#34;ctm&#34;:[1.209373,0.000000,0.000000,1.209373,0.000000,0.000000]}"/></div></div></body></html>