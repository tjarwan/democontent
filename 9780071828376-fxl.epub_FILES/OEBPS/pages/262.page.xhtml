<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><link rel="stylesheet" href="../css/base.min.css"/><link rel="stylesheet" href="../css/fancy.min.css"/><link rel="stylesheet" href="../css/pdf.css"/><meta name="viewport" content="width=640, height=824"/></head><body><div id="page_body"><div id="pf106" class="pf w2 h2" data-page-no="106"><div class="pc pc106 w2 h2"><div class="t m0 xa3 h10 y83 ff2 fs2 fc0 sc0 ls8 ws0">Chapter 7: Phase III: Remote T<span class="_ _0"/>argeting<span class="_ _9"> </span><span class="ff1 fs9 lsa">239</span></div><div class="t m0 x3 hd y11c ff4 fs7 fc0 sc0 ls0 ws0">passwords, use common character substitutions (for e<span class="_ _0"/>xample, @ in place of a), or </div><div class="t m0 x3 hd y11d ff4 fs7 fc0 sc0 ls0 ws0">e<span class="_ _0"/>ven mix the order of password characters. <span class="_ _0"/>W<span class="_ _3"/>e’ll use the hashcat rules system to </div><div class="t m0 x3 hd y20f ff4 fs7 fc0 sc0 ls0 ws0">mangle the wordlist le. <span class="_ _0"/>The hashcat version on Kali comes preinstalled with se<span class="_ _0"/>veral </div><div class="t m0 x3 hd y210 ff4 fs7 fc0 sc0 ls0 ws0">rules les under the /usr/share/hashcat/rules directory<span class="_ _2"/>. The hashcat rules are actually </div><div class="t m0 x3 hd y211 ff4 fs7 fc0 sc0 ls0 ws0">extremely comple<span class="_ _0"/>x and exible. I highly recommend you check out the hashcat </div><div class="t m0 x3 hd y212 ff4 fs7 fc0 sc0 ls0 ws0">website to see all of the functions av<span class="_ _0"/>ailable using hashcat rules, as well as test out all </div><div class="t m0 x3 hd y213 ff4 fs7 fc0 sc0 ls0 ws0">of the rules les av<span class="_ _0"/>ailable to you.</div><div class="t m0 x4 hd y1654 ff4 fs7 fc0 sc0 ls0 ws0">In this case, we’ll use the best64 rules le. <span class="_ _0"/>This le, not surprisingly<span class="_ _2"/>, uses the “top </div><div class="t m0 x3 hd y3c6 ff4 fs7 fc0 sc0 ls0 ws0">64” chosen rules to mangle the passwords. </div><div class="t m0 x3 h44 y18dd fff fse fc0 sc0 ls0 ws0">root@kali:~# hashcat weak.txt -r /usr/share/hashcat/rules/best64.rule </div><div class="t m0 x3 h44 y18de fff fse fc0 sc0 ls0 ws0">--stdout &gt;&gt; weak-64.txt</div><div class="t m0 x3 h44 y18df fff fse fc0 sc0 ls0 ws0">root@kali:~# wc -l weak-64.txt </div><div class="t m0 x3 h44 y18e0 fff fse fc0 sc0 ls0 ws0">17859 weak-64.txt</div><div class="t m0 x3 h44 y18e1 fff fse fc0 sc0 ls0 ws0">root@kali:~#</div><div class="t m0 x4 hd y18e2 ff4 fs7 fc0 sc0 ls0 ws0">In this case, we went from 238 passwords to o<span class="_ _0"/>ver 17,000 passwords. It’<span class="_ _2"/>s </div><div class="t m0 x3 hd y18e3 ff4 fs7 fc0 sc0 ls0 ws0">important that you really understand the rules and what they are accomplishing so </div><div class="t m0 x3 hd y18e4 ff4 fs7 fc0 sc0 ls0 ws0">that you can build the most ef<span class="_ _0"/>fecti<span class="_ _0"/>v<span class="_ _0"/>e dictionary for your situation. </div><div class="t m0 x4 hd y18e5 ff4 fs7 fc0 sc0 ls0 ws0">Some of you might be thinking: <span class="_ _0"/>W<span class="_ _3"/>ait a minute—if cracking a WP<span class="_ _3"/>A handshake </div><div class="t m0 x3 hd y18e6 ff4 fs7 fc0 sc0 ls0 ws0">is just a simple brute-force ef<span class="_ _0"/>fort, then can’t I just use rainbo<span class="_ _0"/>w tables to speed up </div><div class="t m0 x3 hd y18e7 ff4 fs7 fc0 sc0 ls0 ws0">the ef<span class="_ _0"/>fort? <span class="_ _0"/>V<span class="_ _1b"/>ery good, young grasshopper<span class="_ _0"/>, you’<span class="_ _2"/>re on the right path; but there are </div><div class="t m0 x3 hd y18e8 ff4 fs7 fc0 sc0 ls0 ws0">some minor complications for <span class="_ _0"/>WP<span class="_ _3"/>A that prev<span class="_ _0"/>ent traditional rainbo<span class="_ _0"/>w table attacks. </div><div class="t m0 x3 hd y18e9 ff4 fs7 fc0 sc0 ls0 ws0">Unfortunately<span class="_ _2"/>, the SSID of the network is used as a salt so we can’t necessarily rely </div><div class="t m0 x3 hd y18ea ff4 fs7 fc0 sc0 ls0 ws0">on pre-existing rainbo<span class="_ _0"/>w tables. <span class="_ _0"/>W<span class="_ _3"/>e can choose to create our own rainbo<span class="_ _0"/>w tables once </div><div class="t m0 x3 hd y18eb ff4 fs7 fc0 sc0 ls0 ws0">we kno<span class="_ _0"/>w the SSID of the target networks; ho<span class="_ _0"/>we<span class="_ _0"/>v<span class="_ _0"/>er<span class="_ _0"/>, at that point, we probably won’<span class="_ _0"/>t </div><div class="t m0 x3 hd y18ec ff4 fs7 fc0 sc0 ls0 ws0">be creating much efciency<span class="_ _3"/>, as we will be close to capturing the WP<span class="_ _3"/>A handshake. </div><div class="t m0 x3 hd y18ed ff4 fs7 fc0 sc0 ls0 ws0">There are some limited rainbo<span class="_ _0"/>w tables av<span class="_ _0"/>ailable on the Internet. <span class="_ _0"/>T<span class="_ _2"/>ypically<span class="_ _2"/>, they’ll </div><div class="t m0 x3 hd y18ee ff4 fs7 fc0 sc0 ls0 ws0">contain lists that contain hashes for some of the most common SSIDs—for example, </div><div class="t m0 x3 hd y18ef ff4 fs7 fc0 sc0 ls0 ws0">Linksys, NETGEAR, or default.</div><div class="t m0 x4 hd y18f0 ff4 fs7 fc0 sc0 ls0 ws0">If we’<span class="_ _2"/>ve used an effecti<span class="_ _0"/>v<span class="_ _0"/>e wordlist that contains the ke<span class="_ _0"/>y<span class="_ _2"/>, you’ll see the success </div><div class="t m0 x3 hd y18f1 ff4 fs7 fc0 sc0 ls0 ws0">message as sho<span class="_ _0"/>wn in the following output. Once we’<span class="_ _2"/>ve captured the hash and created </div><div class="t m0 x3 hd y18f2 ff4 fs7 fc0 sc0 ls0 ws0">our wordlist, we can attempt the cracking with the follo<span class="_ _0"/>wing command. <span class="_ _2"/>And if we’<span class="_ _0"/>ve </div><div class="t m0 x3 hd y18f3 ff4 fs7 fc0 sc0 ls0 ws0">created a good enough dictionary<span class="_ _2"/>, we’ll see a success message like the one in the </div><div class="t m0 x3 hd y18f4 ff4 fs7 fc0 sc0 ls0 ws0">follo<span class="_ _0"/>wing output:</div><div class="t m0 x3 h40 y18f5 fff fs5 fc0 sc0 ls0 ws0">root@kali: aircrack-ng -w /root/weak-64.txt *.cap</div><div class="t m0 x3 h40 y18f6 fff fs5 fc0 sc0 ls0 ws0">                               Aircrack-ng 1.1</div></div><div class="pi" data-data="{&#34;ctm&#34;:[1.209373,0.000000,0.000000,1.209373,0.000000,0.000000]}"/></div></div></body></html>