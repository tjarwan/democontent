<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><link rel="stylesheet" href="../css/base.min.css"/><link rel="stylesheet" href="../css/fancy.min.css"/><link rel="stylesheet" href="../css/pdf.css"/><meta name="viewport" content="width=640, height=824"/></head><body><div id="page_body"><div id="pfab" class="pf w2 h2" data-page-no="ab"><div class="pc pcab w2 h2"><div class="t m0 xbe h10 y83 ff1 fs9 fc0 sc0 lsa ws0">148<span class="_ _d"> </span><span class="ff2 fs2 ls8">Advanced Persistent Threat Hacking<span class="_ _1e"/> </span></div><div class="t m0 x4 hd y11c ff4 fs7 fc0 sc0 ls0 ws0">The second option is to use our o<span class="_ _0"/>wn Perl script to search for specic delimiters </div><div class="t m0 x3 hd y11d ff4 fs7 fc0 sc0 ls0 ws0">to identify the text we need. <span class="_ _0"/>This option is better if the actual HTML le is a little </div><div class="t m0 x3 hd y11e ff4 fs7 fc0 sc0 ls0 ws20">messier or doesn’t use tables. <span class="_ _0"/>This can also be used for many other applications, such </div><div class="t m0 x3 hd y15c ff4 fs7 fc0 sc0 ls0 ws0">as XML or JSON les. <span class="_ _2"/>An example Perl script is shown in the follo<span class="_ _0"/>wing code:</div><div class="t m0 x3 h44 y1001 fff fse fc0 sc0 ls0 ws0">#!/usr/bin/perl</div><div class="t m0 x3 h44 y1002 fff fse fc0 sc0 ls0 ws0">use Getopt::Std;</div><div class="t m0 x3 h44 y1003 fff fse fc0 sc0 ls0 ws0">getopt('i', \%args);</div><div class="t m0 x3 h44 y1004 fff fse fc0 sc0 ls0 ws0">$infile = $args{i};</div><div class="t m0 x3 h44 y1005 fff fse fc0 sc0 ls0 ws0">printf "Opening file $infile\n";</div><div class="t m0 x3 h44 y1006 fff fse fc0 sc0 ls0 ws0">open(INFILE, $infile) || die("Could not open in.txt");</div><div class="t m0 x3 h44 y1007 fff fse fc0 sc0 ls0 ws0">while ( &lt;INFILE&gt; ){</div><div class="t m0 x3 h44 y1008 fff fse fc0 sc0 ls0 ws0">if( $_ =~ m/(\"Name\": \")(.*)(\",)/ )</div><div class="t m0 x3 h44 y1009 fff fse fc0 sc0 ls0 ws0">{</div><div class="t m0 x3 h44 y100a fff fse fc0 sc0 ls0 ws0"> print "$2\n";</div><div class="t m0 x3 h44 y100b fff fse fc0 sc0 ls0 ws0">}</div><div class="t m0 x3 h44 y100c fff fse fc0 sc0 ls0 ws0">}</div><div class="t m0 x3 h44 y100d fff fse fc0 sc0 ls0 ws0">close( INFILE );</div><div class="t m0 x4 hd y100e ff4 fs7 fc0 sc0 ls0 ws0">A line from the example JSON le used as input for this le is </div><div class="t m0 x3 h44 y100f fff fse fc0 sc0 ls0 ws0">"Name": "Jason Barnes",</div><div class="t m0 x4 hd y1010 ff4 fs7 fc0 sc0 ls0 ws0">The Perl script uses parentheses and numbered v<span class="_ _0"/>ariables to get matches on </div><div class="t m0 x3 hd y1011 ff4 fs7 fc0 sc0 ls0 ws0">specic areas. In this case, we hav<span class="_ _0"/>e three matches:</div><div class="t m0 x65 hd y1012 ff4 fs7 fc0 sc0 ls0 ws0">(\"Name\": \") = Stored in the $1 v<span class="_ _0"/>ariable</div><div class="t m0 x65 hd y1013 ff4 fs7 fc0 sc0 ls0 ws0">(.*) = Stored in the $2 v<span class="_ _0"/>ariable</div><div class="t m0 x65 hd y1014 ff4 fs7 fc0 sc0 ls0 ws0">(\",) = Signies the end of the $2 v<span class="_ _0"/>ariable and is stored in the $3 variable</div><div class="t m0 x4 hd y1015 ff4 fs7 fc0 sc0 ls0 ws0">The beauty here is that the same exact format can be used for most an<span class="_ _0"/>y les, </div><div class="t m0 x3 hd y1016 ff4 fs7 fc0 sc0 ls0 ws0">including XML, HTML, and e<span class="_ _0"/>ven ra<span class="_ _0"/>w text. In a real-world case, you’<span class="_ _2"/>d want to also </div><div class="t m0 x3 hd y1017 ff4 fs7 fc0 sc0 ls0 ws0">output the other v<span class="_ _0"/>alues in the le we require, such as phone number and address. <span class="_ _3"/>Y<span class="_ _3"/>ou </div><div class="t m0 x3 hd y1018 ff4 fs7 fc0 sc0 ls0 ws0">could also output them automatically into a nice CSV format.</div><div class="t m0 x4 hd y1019 ff4 fs7 fc0 sc0 ls0 ws0">Here you can see an example of the Perl script’<span class="_ _2"/>s output:</div><div class="t m0 x3 h44 y101a fff fse fc0 sc0 ls0 ws0">user@kali:~$ ./names.pl -i json.txt </div><div class="t m0 x3 h44 y101b fff fse fc0 sc0 ls0 ws0">Opening file json.txt</div><div class="t m0 x3 h44 y101c fff fse fc0 sc0 ls0 ws0">Jason Barnes</div><div class="t m0 x3 h44 y101d fff fse fc0 sc0 ls0 ws0">user@kali:~$</div></div><div class="pi" data-data="{&#34;ctm&#34;:[1.209373,0.000000,0.000000,1.209373,0.000000,0.000000]}"/></div></div></body></html>