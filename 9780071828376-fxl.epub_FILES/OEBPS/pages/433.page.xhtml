<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><link rel="stylesheet" href="../css/base.min.css"/><link rel="stylesheet" href="../css/fancy.min.css"/><link rel="stylesheet" href="../css/pdf.css"/><meta name="viewport" content="width=640, height=824"/></head><body><div id="page_body"><div id="pf1b1" class="pf w2 h2" data-page-no="1b1"><div class="pc pc1b1 w2 h2"><div class="t m0 xbe h10 y83 ff1 fs9 fc0 sc0 lsa ws0">410<span class="_ _d"> </span><span class="ff2 fs2 ls8">Advanced Persistent Threat Hacking<span class="_ _1e"/> </span></div><div class="t m0 x4 hd y11c ff4 fs7 fc0 sc0 ls0 ws0">Y<span class="_ _1b"/>ou can see that we simply take the command-line argument handed to our </div><div class="t m0 x3 hd y11d ff4 fs7 fc0 sc0 ls0 ws0">backdoor from the v<span class="_ _0"/>ariable lpCmdLine and start a process with that as the command </div><div class="t m0 x3 hd y11e ff4 fs7 fc0 sc0 ls0 ws0">name—in this case, the intended ex<span class="_ _0"/>ecutable. This is a relati<span class="_ _0"/>v<span class="_ _0"/>ely common technique </div><div class="t m0 x3 hd y15c ff4 fs7 fc0 sc0 ls0 ws0">used by viruses, but denitely one w<span class="_ _0"/>orth being aw<span class="_ _0"/>are of.</div><div class="t m0 x3 h4 y1ccf ff2 fs1 fc0 sc0 ls0 ws0">Backdoor: Interactive Control</div><div class="t m0 x3 hd y1cd0 ff4 fs7 fc0 sc0 ls0 ws0">Obtaining interacti<span class="_ _0"/>ve control of the compromised system is a relati<span class="_ _0"/>vely tri<span class="_ _0"/>vial task in </div><div class="t m0 x3 hd y6b9 ff4 fs7 fc0 sc0 ls0 ws0">most backdoors—the method we choose will be dependent on the specic scenario </div><div class="t m0 x3 hd y6ba ff4 fs7 fc0 sc0 ls0 ws0">we nd ourselves in. Ultimately<span class="_ _3"/>, we may not need true interactive control if we can </div><div class="t m0 x3 hd y2ae ff4 fs7 fc0 sc0 ls0 ws0">send any arbitrary commands to the system; ho<span class="_ _0"/>we<span class="_ _0"/>ver<span class="_ _2"/>, let’<span class="_ _0"/>s look at two simple w<span class="_ _0"/>ays </div><div class="t m0 x3 hd y2af ff4 fs7 fc0 sc0 ls0 ws0">to get interacti<span class="_ _0"/>ve access.</div><div class="t m0 x4 hd y6bd ff4 fs7 fc0 sc0 ls0 ws0">The rst method is as simple as having the backdoor do<span class="_ _0"/>wnload a program such </div><div class="t m0 x3 hd y6be ff4 fs7 fc0 sc0 ls0 ws0">as netcat. Once do<span class="_ _0"/>wnloaded, we can hav<span class="_ _0"/>e the backdoor ex<span class="_ _0"/>ecute a listening shell or </div><div class="t m0 x3 hd y6bf ff4 fs7 fc0 sc0 ls0 ws0">connect to one of our hosts on the Internet. Remember that it is this simple exibility </div><div class="t m0 x3 hd y2b3 ff4 fs7 fc0 sc0 ls0 ws0">of do<span class="_ _0"/>wnloading and ex<span class="_ _0"/>ecuting les that will allow our core backdoor code to remain </div><div class="t m0 x3 hd y2b4 ff4 fs7 fc0 sc0 ls0 ws0">very small and w<span class="_ _0"/>ork very well.</div><div class="t m0 x4 hd y2b5 ff4 fs7 fc0 sc0 ls0 ws0">If, ho<span class="_ _0"/>wev<span class="_ _0"/>er<span class="_ _0"/>, we want to inte<span class="_ _0"/>grate this functionality into our backdoor<span class="_ _0"/>, we can </div><div class="t m0 x3 hd y2b6 ff4 fs7 fc0 sc0 ls0 ws0">borro<span class="_ _0"/>w a few lines of code from the netcat command. <span class="_ _0"/>This full functionality is </div><div class="t m0 x3 hd y2b7 ff4 fs7 fc0 sc0 ls0 ws0">provided on the <span class="_ _2"/>APT Hacker website as the DoExec() function, which can call home </div><div class="t m0 x3 hd y6c0 ff4 fs7 fc0 sc0 ls0 ws0">to any IP address pro<span class="_ _0"/>vided, sending back direct access to cmd.ex<span class="_ _0"/>e ov<span class="_ _0"/>er a TCP sock<span class="_ _0"/>et </div><div class="t m0 x3 hd y6c1 ff4 fs7 fc0 sc0 ls0 ws0">just as the netcat program does. </div><div class="t m0 x3 h4 y26f6 ff2 fs1 fc0 sc0 ls0 ws0">Data Collection</div><div class="t m0 x3 hd y26f7 ff4 fs7 fc0 sc0 ls0 ws0">Determining which data to collect can actually be harder than collecting and </div><div class="t m0 x3 hd y26f8 ff4 fs7 fc0 sc0 ls0 ws0">exltrating it. <span class="_ _2"/>After we’<span class="_ _0"/>v<span class="_ _0"/>e identied, logged, and collected the data we wish to </div><div class="t m0 x3 hd y26f9 ff4 fs7 fc0 sc0 ls0 ws0">exltrate, we can send this data to our C2 serv<span class="_ _0"/>er using a v<span class="_ _0"/>ariety of methods. Let’<span class="_ _0"/>s </div><div class="t m0 x3 hd y26fa ff4 fs7 fc0 sc0 ls0 ws0">explore a fe<span class="_ _0"/>w common things we’<span class="_ _2"/>d want to collect and then revie<span class="_ _0"/>w a fe<span class="_ _0"/>w ways to </div><div class="t m0 x3 hd y26fb ff4 fs7 fc0 sc0 ls0 ws0">send this data back to ourselves.</div><div class="t m0 x3 h7 y26fc ff1 fs3 fc0 sc0 ls0 ws0">Keystroke Logging</div><div class="t m0 x3 hd y26fd ff4 fs7 fc0 sc0 ls0 ws0">The technique to logging ke<span class="_ _0"/>ystrokes programmatically using <span class="_ _0"/>W<span class="_ _0"/>indo<span class="_ _0"/>ws hooks has </div><div class="t m0 x3 hd y26fe ff4 fs7 fc0 sc0 ls0 ws0">been well kno<span class="_ _0"/>wn for a while and the foundation of which is built into the operating </div><div class="t m0 x3 hd y26ff ff4 fs7 fc0 sc0 ls0 ws0">system. The follo<span class="_ _0"/>wing e<span class="_ _0"/>xample uses a <span class="_ _0"/>W<span class="_ _0"/>indo<span class="_ _0"/>ws hook to capture any input from the </div><div class="t m0 x3 hd y2700 ff4 fs7 fc0 sc0 ls0 ws0">ke<span class="_ _0"/>yboard (keystrok<span class="_ _0"/>es), perform the actions we choose based on that input (logging), </div><div class="t m0 x3 hd y2701 ff4 fs7 fc0 sc0 ls0 ws0">and then forward the ke<span class="_ _0"/>y to the intended application. <span class="_ _3"/>Y<span class="_ _3"/>ou can compile the follo<span class="_ _0"/>wing </div></div><div class="pi" data-data="{&#34;ctm&#34;:[1.209373,0.000000,0.000000,1.209373,0.000000,0.000000]}"/></div></div></body></html>