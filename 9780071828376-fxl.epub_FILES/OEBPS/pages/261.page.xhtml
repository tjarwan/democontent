<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><link rel="stylesheet" href="../css/base.min.css"/><link rel="stylesheet" href="../css/fancy.min.css"/><link rel="stylesheet" href="../css/pdf.css"/><meta name="viewport" content="width=640, height=824"/></head><body><div id="page_body"><div id="pf105" class="pf w2 h2" data-page-no="105"><div class="pc pc105 w2 h2"><div class="t m0 xbe h10 y83 ff1 fs9 fc0 sc0 lsa ws0">238<span class="_ _d"> </span><span class="ff2 fs2 ls8">Advanced Persistent Threat Hacking<span class="_ _1e"/> </span></div><div class="t m0 x3 hd y11c ff4 fs7 fc0 sc0 ls0 ws0">basic example using the hashcat “combinatory” attack. <span class="_ _0"/>T<span class="_ _3"/>o execute the combinatory </div><div class="t m0 x3 hd y11d ff4 fs7 fc0 sc0 ls0 ws0">attack, we use the -a 1 argument, gi<span class="_ _0"/>v<span class="_ _0"/>e it our wordlist words.txt, and tell it to print to </div><div class="t m0 x3 hd y20f ff4 fs7 fc0 sc0 ls0 ws0">stdout. <span class="_ _0"/>W<span class="_ _3"/>e then pipe this to our le combined.txt.</div><div class="t m0 x3 h44 ya39 fff fse fc0 sc0 ls0 ws0">root@kali:~# hashcat –a 1 words.txt –-stdout &gt;&gt; combined.txt</div><div class="t m0 x4 hd y18bd ff4 fs7 fc0 sc0 ls0 ws0">This attack takes e<span class="_ _0"/>very w<span class="_ _0"/>ord in the words.txt le and appends it to e<span class="_ _0"/>very other </div><div class="t m0 x3 hd y18be ff4 fs7 fc0 sc0 ls0 ws0">word in the same le. F<span class="_ _0"/>or example, if you perform the combinatory attack with a test </div><div class="t m0 x3 hd y18bf ff4 fs7 fc0 sc0 ls0 ws0">le that contains only these three lines:</div><div class="t m0 x3 h44 y18c0 fff fse fc0 sc0 ls0 ws0">One</div><div class="t m0 x3 h44 y18c1 fff fse fc0 sc0 ls0 ws0">Two</div><div class="t m0 x3 h44 y18c2 fff fse fc0 sc0 ls0 ws0">Three</div><div class="t m0 x3 hd y18c3 ff4 fs7 fc0 sc0 ls0 ws0">the output le combined.txt will then contain these nine words:</div><div class="t m0 x3 h44 y18c4 fff fse fc0 sc0 ls0 ws0">OneOne</div><div class="t m0 x3 h44 y18c5 fff fse fc0 sc0 ls0 ws0">OneTwo</div><div class="t m0 x3 h44 y18c6 fff fse fc0 sc0 ls0 ws0">OneThree</div><div class="t m0 x3 h44 y18c7 fff fse fc0 sc0 ls0 ws0">TwoOne</div><div class="t m0 x3 h44 y18c8 fff fse fc0 sc0 ls0 ws0">TwoTwo</div><div class="t m0 x3 h44 y18c9 fff fse fc0 sc0 ls0 ws0">TwoThree</div><div class="t m0 x3 h44 y18ca fff fse fc0 sc0 ls0 ws0">ThreeOne</div><div class="t m0 x3 h44 y18cb fff fse fc0 sc0 ls0 ws0">ThreeTwo</div><div class="t m0 x3 h44 y18cc fff fse fc0 sc0 ls0 ws0">ThreeThree</div><div class="t m0 x4 hd y18cd ff4 fs7 fc0 sc0 ls0 ws0">When you look at the words in our original tar<span class="_ _0"/>geted wordlist, we started with 14 </div><div class="t m0 x3 hd y18ce ff4 fs7 fc0 sc0 ls0 ws0">words, and after the rst combinatory attack, we end up with 238 words. <span class="_ _0"/>There are </div><div class="t m0 x3 hd y18cf ff4 fs7 fc0 sc0 ls0 ws0">still words we will want appended to the tw<span class="_ _0"/>o-word passwords generated. If we run </div><div class="t m0 x3 hd y18d0 ff4 fs7 fc0 sc0 lsb ws16">the combinator attack again, you’ll see we ended up with o<span class="_ _0"/>ver 50,000 words, which </div><div class="t m0 x3 hd y18d1 ff4 fs7 fc0 sc0 ls0 ws0">you’ll see in the follo<span class="_ _0"/>wing output!</div><div class="t m0 x3 h44 y18d2 fff fse fc0 sc0 ls0 ws0">root@kali:~# hashcat -a 1 words.txt --stdout &gt;&gt; words.txt</div><div class="t m0 x3 h44 y18d3 fff fse fc0 sc0 ls0 ws0">root@kali:~# wc -l words.txt </div><div class="t m0 x3 h44 y18d4 fff fse fc0 sc0 ls0 ws0">238 words.txt</div><div class="t m0 x3 h44 y18d5 fff fse fc0 sc0 ls0 ws0">root@kali:~# hashcat -a 1 words.txt --stdout &gt;&gt; words.txt</div><div class="t m0 x3 h44 y18d6 fff fse fc0 sc0 ls0 ws0">root@kali:~# wc -l words.txt </div><div class="t m0 x3 h44 y18d7 fff fse fc0 sc0 ls0 ws0">57358 words.txt</div><div class="t m0 x3 h44 y18d8 fff fse fc0 sc0 ls0 ws0">root@kali:~# sort –u words.txt &gt;&gt; final.txt</div><div class="t m0 x4 hd y18d9 ff4 fs7 fc0 sc0 ls0 ws0">Of course, when using this simple method, there may be duplicate words, which </div><div class="t m0 x3 h3f y18da ff4 fs7 fc0 sc0 ls0 ws0">we can remov<span class="_ _0"/>e using the <span class="fff">sort -u</span> command, as sho<span class="_ _0"/>wn earlier<span class="_ _0"/>. <span class="_ _2"/>At this point, we </div><div class="t m0 x3 hd y18db ff4 fs7 fc0 sc0 ls0 ws0">hav<span class="_ _0"/>e a good wordlist of all of our combined w<span class="_ _0"/>ords, but we still need to mangle them. </div><div class="t m0 x3 hd y18dc ff4 fs7 fc0 sc0 ls0 ws0">When mangling them, we’ll do things like add common numbers to the end of all </div></div><div class="pi" data-data="{&#34;ctm&#34;:[1.209373,0.000000,0.000000,1.209373,0.000000,0.000000]}"/></div></div></body></html>