<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><link rel="stylesheet" href="../css/base.min.css"/><link rel="stylesheet" href="../css/fancy.min.css"/><link rel="stylesheet" href="../css/pdf.css"/><meta name="viewport" content="width=640, height=824"/></head><body><div id="page_body"><div id="pf13e" class="pf w2 h2" data-page-no="13e"><div class="pc pc13e w2 h2"><div class="t m0 x2 h10 y83 ff2 fs2 fc0 sc0 ls8 ws0">Chapter 8: Spear Phishing with Hardware T<span class="_ _0"/>rojans<span class="_ _9"> </span><span class="ff1 fs9 lsa">295</span></div><div class="t m0 x3 hd y11c ff4 fs7 fc0 sc0 ls0 ws0">the teensy-payload-split.sh script with the ex<span class="_ _0"/>ecutable as the argument, as in the </div><div class="t m0 x3 hd y11d ff4 fs7 fc0 sc0 ls0 ws0">follo<span class="_ _0"/>wing example:</div><div class="t m0 x3 h40 y19bc fff fs5 fc0 sc0 ls0 ws0">root@kali:~/hid-backdoor-peensy/utils$ ./teensy-payload-split.sh calc.exe</div><div class="t m0 x3 h40 y19bd fff fs5 fc0 sc0 ls0 ws0">root@kali:~/dev/teensy/hid-backdoor-peensy/utils$ ls</div><div class="t m0 x3 h40 y19be fff fs5 fc0 sc0 ls0 ws0">calc.exe  converted  teensy-payload-split.sh  zip.txt</div><div class="t m0 x3 h40 y19bf fff fs5 fc0 sc0 ls0 ws0">root@kali:~/hid-backdoor-peensy/utils$ cd converted/</div><div class="t m0 x3 h40 y19c0 fff fs5 fc0 sc0 ls0 ws0">root@kali:~/hid-backdoor-peensy/utils/converted$ ls</div><div class="t m0 x3 h40 y1e01 fff fs5 fc0 sc0 ls0 ws0">calc0.txt   calc12.txt  calc15.txt  calc18.txt  calc2.txt  calc5.txt  calc8.</div><div class="t m0 x3 h40 y1e02 fff fs5 fc0 sc0 ls0 ws0">txt  remove.txt</div><div class="t m0 x3 h40 y1e03 fff fs5 fc0 sc0 ls0 ws0">calc10.txt  calc13.txt  calc16.txt  calc19.txt  calc3.txt  calc6.txt  calc9.</div><div class="t m0 x3 h40 y1e04 fff fs5 fc0 sc0 ls0 ws0">txt  unpack.txt</div><div class="t m0 x3 h40 y1e05 fff fs5 fc0 sc0 ls0 ws0">calc11.txt  calc14.txt  calc17.txt  calc1.txt   calc4.txt  calc7.txt  calc.txt</div><div class="t m0 x3 h40 y1e06 fff fs5 fc0 sc0 ls0 ws0">root@kali:~/hid-backdoor-peensy/utils/converted$</div><div class="t m0 x4 hd y1e07 ff4 fs7 fc0 sc0 ls0 ws0">The teensy-payload-split script will place all necessary les in the con<span class="_ _0"/>v<span class="_ _0"/>erted </div><div class="t m0 x3 hd y1e08 ff4 fs7 fc0 sc0 ls0 ws0">directory<span class="_ _2"/>. <span class="_ _3"/>Y<span class="_ _3"/>ou would then copy all of these les to the root of the <span class="_ _0"/>T<span class="_ _2"/>eensy SD card. </div><div class="t m0 x3 hd y1e09 ff4 fs7 fc0 sc0 ls0 ws0">Then we would call the type_internal_sd_binary function from within our <span class="_ _0"/>T<span class="_ _2"/>eensy </div><div class="t m0 x3 hd y1e0a ff4 fs7 fc0 sc0 ls0 ws0">payload. Note that the function needs to be called when the acti<span class="_ _0"/>ve windo<span class="_ _0"/>w is a cmd</div><div class="t m0 x3 hd y1e0b ff4 fs7 fc0 sc0 ls0 ws0">.ex<span class="_ _0"/>e windo<span class="_ _0"/>w<span class="_ _2"/>. In this example, the function would be called with the follo<span class="_ _0"/>wing line:</div><div class="t m0 x3 h44 y1e0c fff fse fc0 sc0 ls0 ws0">type_internal_sd_binary("calc");</div><div class="t m0 x4 hd y1e0d ff4 fs7 fc0 sc0 ls0 ws0">Notice that you don’t use the full binary name with the e<span class="_ _0"/>xecutable e<span class="_ _0"/>xtension. This </div><div class="t m0 x3 hd y1e0e ff4 fs7 fc0 sc0 ls0 ws0">function then loops through all of the av<span class="_ _0"/>ailable te<span class="_ _0"/>xt les that begin with calc, in this </div><div class="t m0 x3 hd y1e0f ff4 fs7 fc0 sc0 ls0 ws0">case, calc0.txt, calc1.txt, calc2.txt, and so on, typing the contents of the le into le</div><div class="t m0 x3 hd y1e10 ff4 fs7 fc0 sc0 ls0 ws0">.txt. The function then copies the follo<span class="_ _0"/>wing three te<span class="_ _0"/>xt les:</div><div class="t m0 x16 h1f y1e11 ffb fse fc0 sc0 ls0 ws0">c</div><div class="t m0 x1 hd y1e12 ff4 fs7 fc0 sc0 ls0 ws0">remov<span class="_ _0"/>e.txt, which is a script to remov<span class="_ _0"/>e the end of line characters from the le</div><div class="t m0 x1 hd y1e13 ff4 fs7 fc0 sc0 ls0 ws0">.txt le</div><div class="t m0 x16 h1f y1e14 ffb fse fc0 sc0 ls0 ws0">c</div><div class="t m0 x1 hd y1e15 ff4 fs7 fc0 sc0 ls0 ws0">unpack.txt, which is a script to con<span class="_ _0"/>v<span class="_ _0"/>ert the Base64-encoded contents le.txt </div><div class="t m0 x1 hd y1e16 ff4 fs7 fc0 sc0 ls0 ws0">back into binary and sav<span class="_ _0"/>e it in an ex<span class="_ _0"/>ecutable, in this case, calc.ex<span class="_ _0"/>e</div><div class="t m0 x16 h1f y1e17 ffb fse fc0 sc0 ls0 ws0">c</div><div class="t m0 x1 hd y1e18 ff4 fs7 fc0 sc0 ls0 ws0">calc.txt, which contains the commands to run the remov<span class="_ _0"/>e.vbs script and the </div><div class="t m0 x1 hd y1e19 ff4 fs7 fc0 sc0 ls0 ws0">unpack.txt</div><div class="t m0 x4 hd y1e1a ff4 fs7 fc0 sc0 ls0 ws0">Finally<span class="_ _2"/>, we would run our binary ex<span class="_ _0"/>ecutable from the command line using </div><div class="t m0 x3 hd y1e1b ff4 fs7 fc0 sc0 ls0 ws0">the same simple K<span class="_ _0"/>eyboard.Print function used in the rst e<span class="_ _0"/>xample—in this case, </div><div class="t m0 x3 hd y1e1c ff4 fs7 fc0 sc0 ls0 ws0">K<span class="_ _0"/>eyboard.Print(“calc.e<span class="_ _0"/>xe\n”).</div></div><div class="pi" data-data="{&#34;ctm&#34;:[1.209373,0.000000,0.000000,1.209373,0.000000,0.000000]}"/></div></div></body></html>