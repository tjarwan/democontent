<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><link rel="stylesheet" href="../css/base.min.css"/><link rel="stylesheet" href="../css/fancy.min.css"/><link rel="stylesheet" href="../css/pdf.css"/><meta name="viewport" content="width=640, height=824"/></head><body><div id="page_body"><div id="pf13d" class="pf w2 h2" data-page-no="13d"><div class="pc pc13d w2 h2"><img class="bi xaf ybda w4 h7e" alt="" src="bg13d.png"/><div class="t m0 xbe h10 y83 ff1 fs9 fc0 sc0 lsa ws0">294<span class="_ _d"> </span><span class="ff2 fs2 ls8">Advanced Persistent Threat Hacking<span class="_ _1e"/> </span></div><div class="t m0 x3 hd y11c ff4 fs7 fc0 sc0 ls0 ws0">because it doesn’t require soldering to test. Once we deplo<span class="_ _0"/>y the package, though, </div><div class="t m0 x3 hd y11d ff4 fs7 fc0 sc0 ls0 ws0">we’<span class="_ _2"/>d obviously want to secure the riser to the T<span class="_ _3"/>eensy<span class="_ _2"/>.</div><div class="t m0 x4 hd y11e ff4 fs7 fc0 sc0 ls0 ws0">The Of<span class="_ _0"/>fensiv<span class="_ _0"/>e Security team de<span class="_ _0"/>veloped a v<span class="_ _0"/>ery exible and fault-tolerant payload </div><div class="t m0 x3 hd y11f ff4 fs7 fc0 sc0 ls0 ws0">for T<span class="_ _3"/>eensy devices called Peensy that has a lot of good e<span class="_ _0"/>xample code that we can </div><div class="t m0 x3 hd y120 ff4 fs7 fc0 sc0 ls0 ws0">tweak to t our needs. There are e<span class="_ _0"/>xamples of both methods of typing out an exploit </div><div class="t m0 x3 hd y121 ff4 fs7 fc0 sc0 ls0 ws0">and accessing an attached USB storage de<span class="_ _0"/>vice included in the Peensy source code. </div><div class="t m0 x3 hd y398 ff4 fs7 fc0 sc0 ls0 ws0">The real trick with transferring binary “les” from the T<span class="_ _3"/>eensy is that we can’t </div><div class="t m0 x3 hd y399 ff4 fs7 fc0 sc0 ls0 ws0">nati<span class="_ _0"/>vely type binary data with a ke<span class="_ _0"/>yboard.</div><div class="t m0 x4 hd y124 ff4 fs7 fc0 sc0 ls0 ws0">T<span class="_ _3"/>o get around this limitation, we rst encode the binary data in Base64, type out </div><div class="t m0 x3 hd y125 ff4 fs7 fc0 sc0 ls0 ws0">the Base64 encoding into a text le on the tar<span class="_ _0"/>get computer<span class="_ _0"/>, and then con<span class="_ _2"/>vert it back </div><div class="t m0 x3 hd y126 ff4 fs7 fc0 sc0 ls0 ws0">from Base64 encoding to binary<span class="_ _2"/>. W<span class="_ _3"/>e can con<span class="_ _0"/>v<span class="_ _0"/>ert from Base64 back to binary using </div><div class="t m0 x3 hd y39a ff4 fs7 fc0 sc0 ls0 ws0">a script that we can type out, for example, using a <span class="_ _2"/>VB Script. The Base64 encoding </div><div class="t m0 x3 hd y39b ff4 fs7 fc0 sc0 ls0 ws0">scheme is the perfect tool for the job here because it’<span class="_ _2"/>s made to represent binary data </div><div class="t m0 x3 hd y4b2 ff4 fs7 fc0 sc0 ls0 ws0">in text form. <span class="_ _0"/>This process is sho<span class="_ _0"/>wn in Figure 8-12.</div><div class="t m0 x4 hd y4b3 ff4 fs7 fc0 sc0 ls0 ws0">T<span class="_ _3"/>o transfer arbitrary binary from a T<span class="_ _2"/>eensy-mounted SD card using the Peensy </div><div class="t m0 x3 hd y39e ff4 fs7 fc0 sc0 ls0 ws0">source code, we would start by con<span class="_ _2"/>verting the executable to a Base64 te<span class="_ _0"/>xt le. </div><div class="t m0 x3 hd y39f ff4 fs7 fc0 sc0 ls0 ws0">The Peensy project comes with a helper script called teensy-payload-split.sh. Run </div><div class="t m0 x3 h21 y1df1 ff1 fs2 fc0 sc0 ls0 ws0">Figure 8-12<span class="_ _21"> </span><span class="ffc">T<span class="_ _3"/>eensy transfer binar<span class="_ _1"/>y executable process</span></div><div class="t m0 xe0 h22 y1df2 ffd fs5 fc0 sc0 ls0 ws0">Windows Binary</div><div class="t m0 xe1 h22 y1df3 ffd fs5 fc0 sc0 ls0 ws0">Executable</div><div class="t m0 xdb h22 y1df2 ffd fs5 fc0 sc0 ls0 ws0">Windows Binary</div><div class="t m0 x6d h22 y1df3 ffd fs5 fc0 sc0 ls0 ws0">Executable</div><div class="t m0 xc9 h22 y1df4 ffd fs5 fc0 sc0 ls0 ws0">Base 64</div><div class="t m0 xc9 h22 y1df5 ffd fs5 fc0 sc0 ls0 ws0">Encoding</div><div class="t m0 xe2 h22 y1df6 ffd fs5 fc0 sc0 ls0 ws0">Script performs</div><div class="t m0 xca h22 y1df7 ffd fs5 fc0 sc0 ls0 ws0">Base64 decoding</div><div class="t m0 xe3 h22 y1df8 ffd fs5 fc0 sc0 ls0 ws0">Teensy types</div><div class="t m0 xe3 h22 y1df9 ffd fs5 fc0 sc0 ls0 ws0">contents of text le</div><div class="t m0 xe3 h22 y1dfa ffd fs5 fc0 sc0 ls0 ws0">on to computer</div><div class="t m0 x5b h22 y1dfb ffd fs5 fc0 sc0 ls0 ws0">Save to Teensy</div><div class="t m0 x42 h22 y1dfc ffd fs5 fc0 sc0 ls0 ws0">SD card</div><div class="t m0 x6a h3e y1dfd ffd fs10 fc0 sc0 ls0 ws0">Base64</div><div class="t m0 x6a h3e y1dfe ffd fs10 fc0 sc0 ls0 ws0">Text File</div><div class="t m0 x95 h3e y1dff ffd fs10 fc0 sc0 ls0 ws0">Base64</div><div class="t m0 x95 h3e y1e00 ffd fs10 fc0 sc0 ls0 ws0">Text File</div></div><div class="pi" data-data="{&#34;ctm&#34;:[1.209373,0.000000,0.000000,1.209373,0.000000,0.000000]}"/></div></div></body></html>