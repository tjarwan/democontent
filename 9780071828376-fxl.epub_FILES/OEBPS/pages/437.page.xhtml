<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title/><link rel="stylesheet" href="../css/base.min.css"/><link rel="stylesheet" href="../css/fancy.min.css"/><link rel="stylesheet" href="../css/pdf.css"/><meta name="viewport" content="width=640, height=824"/></head><body><div id="page_body"><div id="pf1b5" class="pf w2 h2" data-page-no="1b5"><div class="pc pc1b5 w2 h2"><div class="t m0 xbe h10 y83 ff1 fs9 fc0 sc0 lsa ws0">414<span class="_ _d"> </span><span class="ff2 fs2 ls8">Advanced Persistent Threat Hacking<span class="_ _1e"/> </span></div><div class="t m0 x4 hd y11c ff4 fs7 fc0 sc0 ls0 ws0">Y<span class="_ _1b"/>ou’ll notice that the Ke<span class="_ _0"/>yboardHook callback, which is sho<span class="_ _0"/>wn in the following </div><div class="t m0 x3 hd y11d ff4 fs7 fc0 sc0 ls0 ws0">example, simply calls the processK<span class="_ _0"/>e<span class="_ _0"/>yStroke function any time a k<span class="_ _0"/>eydo<span class="_ _0"/>wn e<span class="_ _0"/>vent </div><div class="t m0 x3 hd y11e ff4 fs7 fc0 sc0 ls0 ws0">occurs. The callback function then forw<span class="_ _0"/>ards the ev<span class="_ _0"/>ent to the next appropriate </div><div class="t m0 x3 hd y15c ff4 fs7 fc0 sc0 ls0 ws0">application, or hook, using the CallNextHookEx function:</div><div class="t m0 x3 h40 y2752 fff fs5 fc0 sc0 ls0 ws0">LRESULT CALLBACK KeyboardHook (int nCode, WPARAM wParam, LPARAM lParam )</div><div class="t m0 x3 h40 y2753 fff fs5 fc0 sc0 ls0 ws0">{</div><div class="t m0 x3 h40 y2754 fff fs5 fc0 sc0 ls0 ws0"> if (nCode == HC_ACTION)</div><div class="t m0 x3 h40 y2755 fff fs5 fc0 sc0 ls0 ws0">    if (wParam == WM_SYSKEYDOWN || wParam == WM_KEYDOWN)</div><div class="t m0 x3 h40 y2756 fff fs5 fc0 sc0 ls0 ws0">    processKeyStroke (((PKBDLLHOOKSTRUCT)lParam)-&gt;vkCode);</div><div class="t m0 x3 h40 y2757 fff fs5 fc0 sc0 ls0 ws0"> return CallNextHookEx(hHook, nCode, wParam, lParam);</div><div class="t m0 x3 h40 y2758 fff fs5 fc0 sc0 ls0 ws0">}</div><div class="t m0 x4 hd y2759 ff4 fs7 fc0 sc0 ls1a ws0">The processK<span class="_ _0"/>eyStroke function is the true w<span class="_ _0"/>orker function of this hook, which </div><div class="t m0 x3 hd y275a ff4 fs7 fc0 sc0 ls1a ws0">handles the interpretation and logging of the ke<span class="_ _0"/>y pressed. If the key pressed is a standard </div><div class="t m0 x3 hd y275b ff4 fs7 fc0 sc0 ls1a ws0">alphanumeric character<span class="_ _0"/>, then the function writes the character to the logging le. </div><div class="t m0 x3 hd y275c ff4 fs7 fc0 sc0 ls1a ws0">Ho<span class="_ _0"/>wev<span class="_ _0"/>er<span class="_ _0"/>, there are important ke<span class="_ _0"/>ys that are not printable that we still want to record—</div><div class="t m0 x3 hd y275d ff4 fs7 fc0 sc0 ls1a ws0">for example, e<span class="_ _0"/>v<span class="_ _0"/>ery time the user presses the  key or one of the  k<span class="_ _0"/>eys. <span class="_ _0"/>This </div><div class="t m0 x3 hd y275e ff4 fs7 fc0 sc0 ls1a ws0">example does not include some important characters that are printable such as curly </div><div class="t m0 x3 hd y275f ff4 fs7 fc0 sc0 ls1a ws0">braces, pipe, semicolon, and so on. For the full source code visit the apt hack<span class="_ _0"/>er website.</div><div class="t m0 x4 hd y2760 ff4 fs7 fc0 sc0 ls0 ws0">If we were to simply delete the characters that a user deletes rather than logging </div><div class="t m0 x3 hd y2761 ff4 fs7 fc0 sc0 ls0 ws0">the  ke<span class="_ _0"/>ypresses, then we might lose valuable information. Consider a </div><div class="t m0 x3 hd y2762 ff4 fs7 fc0 sc0 ls0 ws0">scenario where a user enters an old password, presses <span class="_ _0"/><span class="_ _0"/> to remov<span class="_ _0"/>e all of </div><div class="t m0 x3 hd y2763 ff4 fs7 fc0 sc0 ls0 ws0">the characters, and then enters the correct password. I ha<span class="_ _0"/>ve captured k<span class="_ _0"/>eystrokes </div><div class="t m0 x3 hd y2764 ff4 fs7 fc0 sc0 ls0 ws0">in this exact scenario before, and it has pro<span class="_ _0"/>ven to be in<span class="_ _2"/>valuable to identify old </div><div class="t m0 x3 hd y2765 ff4 fs7 fc0 sc0 ls0 ws0">passwords as well as password choosing methods used by the user<span class="_ _2"/>.</div><div class="t m0 x4 hd y2766 ff4 fs7 fc0 sc0 ls0 ws0">Y<span class="_ _1b"/>ou’ll notice that to record these ev<span class="_ _0"/>ents we log messages such as [del] and </div><div class="t m0 x3 hd y2767 ff4 fs7 fc0 sc0 ls0 ws0">[LSHIFT] to the log le; thus, you’ll ha<span class="_ _0"/>ve to do some interpreting of the log le, </div><div class="t m0 x3 hd y2768 ff4 fs7 fc0 sc0 ls0 ws0">which is ultimately a pretty easy task. In this example, we’<span class="_ _2"/>ve only logged a limited </div><div class="t m0 x3 hd y2769 ff4 fs7 fc0 sc0 ls0 ws0">number of the nonprintable ke<span class="_ _0"/>ys that a user can press for the sake of bre<span class="_ _0"/>vity<span class="_ _2"/>. For a </div><div class="t m0 x3 hd y276a ff4 fs7 fc0 sc0 ls0 ws0">more complete source le, visit the <span class="_ _2"/>APT Hacking website.</div><div class="t m0 x4 hd y276b ff4 fs7 fc0 sc0 ls0 ws0">There are also examples on the <span class="_ _2"/>APT Hacking website of building the k<span class="_ _0"/>eylogging </div><div class="t m0 x3 hd y276c ff4 fs7 fc0 sc0 ls0 ws0">functionality into a modular DLL, which can then be used easily among dif<span class="_ _0"/>ferent </div><div class="t m0 x3 hd y276d ff4 fs7 fc0 sc0 ls0 ws0">backdoors you de<span class="_ _0"/>velop. One of the benets of using a <span class="_ _0"/>W<span class="_ _0"/>indo<span class="_ _0"/>ws hook is that it does </div><div class="t m0 x3 hd y276e ff4 fs7 fc0 sc0 ls0 ws0">not require administrati<span class="_ _0"/>ve credentials. <span class="_ _0"/>This allows us to capture an<span class="_ _0"/>y ke<span class="_ _0"/>ystrokes as </div><div class="t m0 x3 hd y276f ff4 fs7 fc0 sc0 ls0 ws0">long as we hav<span class="_ _0"/>e the same permissions as the person ex<span class="_ _0"/>ecuting the program.</div><div class="t m0 x3 h7 y2770 ff1 fs3 fc0 sc0 ls0 ws0">Windows Credentials at Logon</div><div class="t m0 x3 hd y2771 ff4 fs7 fc0 sc0 lsb ws16">There are two primary methods to gather clearte<span class="_ _0"/>xt credentials at logon from </div><div class="t m0 x3 hd y2772 ff4 fs7 fc0 sc0 ls0 ws0">W<span class="_ _0"/>indo<span class="_ _0"/>ws users: using backdoored Graphical Identication and <span class="_ _2"/>Authentication </div><div class="t m0 x3 hd y2773 ff4 fs7 fc0 sc0 ls0 ws0">(GIN<span class="_ _0"/>A) and credential providers. Unfortunately<span class="_ _3"/>, they both require you to hav<span class="_ _0"/>e </div></div><div class="pi" data-data="{&#34;ctm&#34;:[1.209373,0.000000,0.000000,1.209373,0.000000,0.000000]}"/></div></div></body></html>